{"version":3,"sources":["../../../src/internal-plugins/query-runner/file-parser.js"],"names":["filePath","fileStr","ast","transpiled","apiRunnerNode","filename","contents","length","item","tmp","babylon","parse","sourceType","plugins","error","report","undefined","sourceFilename","parseToAst","file","text","Promise","resolve","reject","then","queries","ExportNamedDeclaration","path","state","traverse","TaggedTemplateExpression","innerPath","gqlAst","getGraphQLTag","definitions","forEach","def","name","value","panic","getMissingNameErrorMessage","push","catch","findGraphQLTags","fs","require","crypto","stripIndent","cache","FileParser","parseFile","readFile","err","indexOf","hash","createHash","update","digest","astDefinitions","kind","parseFiles","files","documents","Map","all","map","doc","set"],"mappings":"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","file":"file-parser.js","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\n\n// Traverse is a es6 module...\nimport traverse from \"babel-traverse\"\nconst babylon = require(`babylon`)\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { getGraphQLTag } = require(`../../utils/babel-plugin-extract-graphql`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\n\nconst apiRunnerNode = require(`../../utils/api-runner-node`)\n\nconst getMissingNameErrorMessage = file => report.stripIndent`\n  GraphQL definitions must be \"named\".\n  The query with the missing name is in ${file}.\n  To fix the query, add \"query MyQueryName\" to the start of your query.\n  So instead of:\n    {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n\n  Do:\n    query MyQueryName {\n      allMarkdownRemark {\n        totalCount\n      }\n    }\n`\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n  })\n\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babylon.parse(item, {\n          sourceType: `module`,\n          plugins: [`*`],\n        })\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n    }\n  } else {\n    try {\n      ast = babylon.parse(fileStr, {\n        sourceType: `module`,\n        sourceFilename: true,\n        plugins: [`*`],\n      })\n    } catch (error) {\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `That Gatsby does not know how to parse.`\n      )\n    }\n  }\n\n  return ast\n}\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const gqlAst = getGraphQLTag(innerPath)\n                if (gqlAst) {\n                  gqlAst.definitions.forEach(def => {\n                    if (!def.name || !def.name.value) {\n                      report.panic(getMissingNameErrorMessage(file))\n                    }\n                  })\n\n                  queries.push(...gqlAst.definitions)\n                }\n              },\n            })\n          },\n        })\n        resolve(queries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      report.error(`There was a problem reading the file: ${file}`, err)\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"]}