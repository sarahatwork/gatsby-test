{"version":3,"sources":["../../../src/internal-plugins/query-runner/page-query-runner.js"],"names":["_","require","queue","store","emitter","queuedDirtyActions","active","exports","runQueries","uniq","a","payload","id","dirtyIds","findDirtyIds","runQueriesForIds","cleanIds","findIdsWithoutDataDependencies","on","action","push","node","runQueuedActions","seenIdsWithoutDataDependencies","state","getState","allTrackedIds","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","pages","map","p","path","layouts","l","ids","pagesAndLayouts","didNotQueueItems","forEach","plObj","find","pl","_id","jsonName","length","Promise","resolve","actions","reduce","internal","type","compact"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;AAOA,MAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,MAAMC,QAAQD,QAAS,eAAT,CAAd;AACA,MAAM,EAAEE,KAAF,EAASC,OAAT,KAAqBH,QAAS,aAAT,CAA3B;;AAEA,IAAII,qBAAqB,EAAzB;AACA,IAAIC,SAAS,KAAb;;AAEA;AACA;AACA;AACAC,QAAQC,UAAR,mCAAqB,aAAY;AAC/B;AACAH,uBAAqBL,EAAES,IAAF,CAAOJ,kBAAP,EAA2B;AAAA,WAAKK,EAAEC,OAAF,CAAUC,EAAf;AAAA,GAA3B,CAArB;AACA,QAAMC,WAAWC,aAAaT,kBAAb,CAAjB;AACA,QAAMU,iBAAiBF,QAAjB,CAAN;;AAEAR,uBAAqB,EAArB;;AAEA;AACA;AACA,QAAMW,WAAWC,gCAAjB;;AAEA;AACA,QAAMF,iBAAiBC,QAAjB,CAAN;;AAEAV,WAAS,IAAT;AACA;AACD,CAjBD;;AAmBAF,QAAQc,EAAR,CAAY,aAAZ,EAA0BC,UAAU;AAClCd,qBAAmBe,IAAnB,CAAwBD,MAAxB;AACD,CAFD;;AAIAf,QAAQc,EAAR,CAAY,aAAZ,EAA0BC,UAAU;AAClCd,qBAAmBe,IAAnB,CAAwB,EAAET,SAASQ,OAAOE,IAAlB,EAAxB;AACD,CAFD;;AAIA,MAAMC;AAAA,8CAAmB,aAAY;AACnC,QAAIhB,MAAJ,EAAY;AACVD,2BAAqBL,EAAES,IAAF,CAAOJ,kBAAP,EAA2B;AAAA,eAAKK,EAAEC,OAAF,CAAUC,EAAf;AAAA,OAA3B,CAArB;AACA,YAAMG,iBAAiBD,aAAaT,kBAAb,CAAjB,CAAN;AACAA,2BAAqB,EAArB;;AAEA;AACA;AACA,YAAMW,WAAWC,gCAAjB;AACAF,uBAAiBC,QAAjB;AACD;AACF,GAXK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAaA;AACA;AACA;AACAZ,QAAQc,EAAR,CAAY,yBAAZ,EAAsCI,gBAAtC;;AAEA,IAAIC,iCAAiC,EAArC;AACA,MAAMN,iCAAiC,MAAM;AAC3C,QAAMO,QAAQrB,MAAMsB,QAAN,EAAd;AACA,QAAMC,gBAAgB1B,EAAES,IAAF,CACpBT,EAAE2B,OAAF,CACE3B,EAAE4B,MAAF,CACE5B,EAAE6B,MAAF,CAASL,MAAMM,yBAAN,CAAgCC,KAAzC,CADF,EAEE/B,EAAE6B,MAAF,CAASL,MAAMM,yBAAN,CAAgCE,WAAzC,CAFF,CADF,CADoB,CAAtB;;AASA;AACA;AACA,QAAMC,gBAAgBjC,EAAEkC,UAAF,CACpB,CACE,GAAGV,MAAMW,KAAN,CAAYC,GAAZ,CAAgBC,KAAKA,EAAEC,IAAvB,CADL,EAEE,GAAGd,MAAMe,OAAN,CAAcH,GAAd,CAAkBI,KAAM,YAAWA,EAAE5B,EAAG,EAAxC,CAFL,CADoB,EAKpB,CAAC,GAAGc,aAAJ,EAAmB,GAAGH,8BAAtB,CALoB,CAAtB;;AAQA;AACA;AACAA,mCAAiCvB,EAAES,IAAF,CAAO,CACtC,GAAGwB,aADmC,EAEtC,GAAGV,8BAFmC,CAAP,CAAjC;;AAKA,SAAOU,aAAP;AACD,CA7BD;;AA+BA,MAAMlB,mBAAmB0B,OAAO;AAC9B,QAAMjB,QAAQrB,MAAMsB,QAAN,EAAd;AACA,QAAMiB,kBAAkB,CAAC,GAAGlB,MAAMW,KAAV,EAAiB,GAAGX,MAAMe,OAA1B,CAAxB;AACA,MAAII,mBAAmB,IAAvB;AACAF,MAAIG,OAAJ,CAAYhC,MAAM;AAChB,UAAMiC,QAAQH,gBAAgBI,IAAhB,CACZC,MAAMA,GAAGT,IAAH,KAAY1B,EAAZ,IAAmB,YAAWmC,GAAGnC,EAAG,EAAlB,KAAwBA,EADpC,CAAd;AAGA,QAAIiC,KAAJ,EAAW;AACTF,yBAAmB,KAAnB;AACAzC,YAAMkB,IAAN,4BAAgByB,KAAhB,IAAuBG,KAAKH,MAAMjC,EAAlC,EAAsCA,IAAIiC,MAAMI,QAAhD;AACD;AACF,GARD;;AAUA,MAAIN,oBAAoB,CAACF,GAArB,IAA4BA,IAAIS,MAAJ,KAAe,CAA/C,EAAkD;AAChD,WAAOC,QAAQC,OAAR,EAAP;AACD;;AAED,SAAO,IAAID,OAAJ,CAAYC,WAAW;AAC5BlD,UAAMgB,EAAN,CAAU,OAAV,EAAkB,MAAM;AACtBkC;AACD,KAFD;AAGD,GAJM,CAAP;AAKD,CAvBD;;AAyBA,MAAMtC,eAAeuC,WAAW;AAC9B,QAAM7B,QAAQrB,MAAMsB,QAAN,EAAd;AACA,SAAO4B,QAAQC,MAAR,CAAe,CAACzC,QAAD,EAAWM,MAAX,KAAsB;AAC1C,UAAME,OAAOF,OAAOR,OAApB;;AAEA;AACAE,eAAWA,SAASe,MAAT,CAAgBJ,MAAMM,yBAAN,CAAgCC,KAAhC,CAAsCV,KAAKT,EAA3C,CAAhB,CAAX;;AAEA;AACAC,eAAWA,SAASe,MAAT,CACTJ,MAAMM,yBAAN,CAAgCE,WAAhC,CAA4CX,KAAKkC,QAAL,CAAcC,IAA1D,CADS,CAAX;;AAIA,WAAOxD,EAAEyD,OAAF,CAAU5C,QAAV,CAAP;AACD,GAZM,EAYJ,EAZI,CAAP;AAaD,CAfD","file":"page-query-runner.js","sourcesContent":["/**\n * Jobs of this module\n * - Ensure on bootstrap that all invalid page queries are run and report\n *   when this is done\n * - Watch for when a page's query is invalidated and re-run it.\n */\n\nconst _ = require(`lodash`)\n\nconst queue = require(`./query-queue`)\nconst { store, emitter } = require(`../../redux`)\n\nlet queuedDirtyActions = []\nlet active = false\n\n// Do initial run of graphql queries during bootstrap.\n// Afterwards we listen \"API_RUNNING_QUEUE_EMPTY\" and check\n// for dirty nodes before running queries.\nexports.runQueries = async () => {\n  // Run queued dirty nodes now that we're active.\n  queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const dirtyIds = findDirtyIds(queuedDirtyActions)\n  await runQueriesForIds(dirtyIds)\n\n  queuedDirtyActions = []\n\n  // Find ids without data dependencies (i.e. no queries have been run for\n  // them before) and run them.\n  const cleanIds = findIdsWithoutDataDependencies()\n\n  // Run these pages\n  await runQueriesForIds(cleanIds)\n\n  active = true\n  return\n}\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.node })\n})\n\nconst runQueuedActions = async () => {\n  if (active) {\n    queuedDirtyActions = _.uniq(queuedDirtyActions, a => a.payload.id)\n    await runQueriesForIds(findDirtyIds(queuedDirtyActions))\n    queuedDirtyActions = []\n\n    // Find ids without data dependencies (e.g. new pages) and run\n    // their queries.\n    const cleanIds = findIdsWithoutDataDependencies()\n    runQueriesForIds(cleanIds)\n  }\n}\n\n// Wait until all plugins have finished running (e.g. various\n// transformer plugins) before running queries so we don't\n// query things in a 1/2 finished state.\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedActions)\n\nlet seenIdsWithoutDataDependencies = []\nconst findIdsWithoutDataDependencies = () => {\n  const state = store.getState()\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...state.pages.map(p => p.path),\n      ...state.layouts.map(l => `LAYOUT___${l.id}`),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages/Layouts without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst runQueriesForIds = ids => {\n  const state = store.getState()\n  const pagesAndLayouts = [...state.pages, ...state.layouts]\n  let didNotQueueItems = true\n  ids.forEach(id => {\n    const plObj = pagesAndLayouts.find(\n      pl => pl.path === id || `LAYOUT___${pl.id}` === id\n    )\n    if (plObj) {\n      didNotQueueItems = false\n      queue.push({ ...plObj, _id: plObj.id, id: plObj.jsonName })\n    }\n  })\n\n  if (didNotQueueItems || !ids || ids.length === 0) {\n    return Promise.resolve()\n  }\n\n  return new Promise(resolve => {\n    queue.on(`drain`, () => {\n      resolve()\n    })\n  })\n}\n\nconst findDirtyIds = actions => {\n  const state = store.getState()\n  return actions.reduce((dirtyIds, action) => {\n    const node = action.payload\n\n    // find invalid pagesAndLayouts\n    dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n    // Find invalid connections\n    dirtyIds = dirtyIds.concat(\n      state.componentDataDependencies.connections[node.internal.type]\n    )\n\n    return _.compact(dirtyIds)\n  }, [])\n}\n"]}