{"version":3,"sources":["../../src/commands/develop.js"],"names":["program","directory","directoryPath","withBasePath","createIndexHtml","developHtml","catch","err","name","report","panic","stripIndent","bootstrap","compilerConfig","webpackConfig","port","devConfig","resolve","compiler","webpack","app","express","use","require","log","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","req","res","next","header","post","enableRefresh","process","env","ENABLE_GATSBY_REFRESH_ENDPOINT","refreshToken","GATSBY_REFRESH_TOKEN","authorizedRefresh","headers","authorization","console","sourceNodes","end","get","launchEditor","query","fileName","lineNumber","static","__dirname","noInfo","quiet","publicPath","output","proxy","config","prefix","url","proxiedUrl","originalUrl","pipe","request","sendFile","decodeURIComponent","parsedPath","parsePath","extname","startsWith","status","server","Server","io","on","socket","join","listener","listen","host","code","watchGlobs","map","chokidar","watch","to","emit","startServer","rl","copyStaticDirectory","formatWebpackMessages","chalk","address","setTimeout","rlInterface","createInterface","input","stdin","stdout","exit","module","exports","detect","parseInt","Promise","_port","question","answer","length","match","then","c","l","prepareUrls","protocol","formatUrl","hostname","format","pathname","prettyPrintUrl","bold","isUnspecifiedHost","lanUrlForConfig","lanUrlForTerminal","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser","printInstructions","appName","urls","useYarn","cyan","isFirstCompile","plugin","messages","stats","toJson","isSuccessful","errors","warnings","sitePackageJson","open"],"mappings":";;;;;;;6CA0CA,WAA2BA,OAA3B,EAAoC;AAClC,UAAMC,YAAYD,QAAQC,SAA1B;AACA,UAAMC,gBAAgBC,aAAaF,SAAb,CAAtB;AACA,UAAMG,kBAAkB;AAAA,aACtBC,YAAYL,OAAZ,EAAqBM,KAArB,CAA2B,eAAO;AAChC,YAAIC,IAAIC,IAAJ,KAAc,cAAlB,EAAiC;AAC/BC,iBAAOC,KAAP,CAAaH,GAAb;AACA;AACD;AACDE,eAAOC,KAAP,CACED,OAAOE,WAAY;;;;SADrB,EAMEJ,GANF;AAQD,OAbD,CADsB;AAAA,KAAxB;;AAgBA;AACA,UAAMK,UAAUZ,OAAV,CAAN;;AAEA,UAAMI,iBAAN;;AAEA,UAAMS,iBAAiB,MAAMC,cAC3Bd,OAD2B,EAE3BC,SAF2B,EAG1B,SAH0B,EAI3BD,QAAQe,IAJmB,CAA7B;;AAOA,UAAMC,YAAYH,eAAeI,OAAf,EAAlB;AACA,UAAMC,WAAWC,QAAQH,SAAR,CAAjB;;AAEA;;;AAGA,UAAMI,MAAMC,SAAZ;AACAD,QAAIE,GAAJ,CACEC,QAAS,wBAAT,EAAkCL,QAAlC,EAA4C;AAC1CM,WAAK,YAAM,CAAE,CAD6B;AAE1CC,YAAO,gBAFmC;AAG1CC,iBAAW,KAAK;AAH0B,KAA5C,CADF;AAOAN,QAAIE,GAAJ,CACG,aADH,EAEEK,YAAY;AACVC,cAAQC,MAAMC,QAAN,GAAiBF,MADf;AAEVG,gBAAU;AAFA,KAAZ,CAFF;;AAQA;AACAX,QAAIE,GAAJ,CAAQ,UAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,UAAIE,MAAJ,CAAY,6BAAZ,EAA2C,GAA3C;AACAF,UAAIE,MAAJ,CACG,8BADH,EAEG,gDAFH;AAIAD;AACD,KAPD;;AASA;;;;;AAKAd,QAAIgB,IAAJ,CAAU,YAAV,EAAuB,UAACJ,GAAD,EAAMC,GAAN,EAAc;AACnC,YAAMI,gBAAgBC,QAAQC,GAAR,CAAYC,8BAAlC;AACA,YAAMC,eAAeH,QAAQC,GAAR,CAAYG,oBAAjC;AACA,YAAMC,oBACJ,CAACF,YAAD,IAAiBT,IAAIY,OAAJ,CAAYC,aAAZ,KAA8BJ,YADjD;;AAGA,UAAIJ,iBAAiBM,iBAArB,EAAwC;AACtCG,gBAAQtB,GAAR,CAAa,wBAAb;AACAuB;AACD;AACDd,UAAIe,GAAJ;AACD,KAXD;;AAaA5B,QAAI6B,GAAJ,CAAS,+BAAT,EAAyC,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACrDiB,mBAAalB,IAAImB,KAAJ,CAAUC,QAAvB,EAAiCpB,IAAImB,KAAJ,CAAUE,UAA3C;AACApB,UAAIe,GAAJ;AACD,KAHD;;AAKA5B,QAAIE,GAAJ,CAAQD,QAAQiC,MAAR,CAAeC,YAAa,SAA5B,CAAR;;AAEAnC,QAAIE,GAAJ,CACEC,QAAS,wBAAT,EAAkCL,QAAlC,EAA4C;AAC1CsC,cAAQ,IADkC;AAE1CC,aAAO,IAFmC;AAG1CC,kBAAY1C,UAAU2C,MAAV,CAAiBD;AAHa,KAA5C,CADF;;AAQA;AACA,UAAM,EAAEE,KAAF,KAAY/B,MAAMC,QAAN,GAAiB+B,MAAnC;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,EAAEE,MAAF,EAAUC,GAAV,KAAkBH,KAAxB;AACAxC,UAAIE,GAAJ,CAAS,GAAEwC,MAAO,IAAlB,EAAuB,UAAC9B,GAAD,EAAMC,GAAN,EAAc;AACnC,cAAM+B,aAAaD,MAAM/B,IAAIiC,WAA7B;AACAjC,YAAIkC,IAAJ,CAASC,QAAQH,UAAR,CAAT,EAA8BE,IAA9B,CAAmCjC,GAAnC;AACD,OAHD;AAID;;AAED;AACAb,QAAI6B,GAAJ,CAAS,GAAT,EAAa,UAACjB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B;AACAD,UAAImC,QAAJ,CACElE,cAAe,UAASmE,mBAAmBrC,IAAIP,IAAvB,CAA6B,EAArD,CADF,EAEE,eAAO;AACL;AACA,YAAI,CAAClB,GAAD,IAAQ,CAACA,IAAIkB,IAAjB,EAAuB;AACrBS;AACD,SAFD,MAEO,IAAI3B,GAAJ,EAAS;AACd;AACA;AACA;AACA,gBAAM+D,aAAaC,UAAUhE,IAAIkB,IAAd,CAAnB;AACA,cACE6C,WAAWE,OAAX,KAAwB,EAAxB,IACAF,WAAWE,OAAX,CAAmBC,UAAnB,CAA+B,OAA/B,CAFF,EAGE;AACAvC;AACD,WALD,MAKO;AACLD,gBAAIyC,MAAJ,CAAW,GAAX,EAAgB1B,GAAhB;AACD;AACF;AACF,OApBH;AAsBD,KAxBD;;AA0BA;AACA5B,QAAIE,GAAJ,CAAQ,UAACU,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,YAAMoC,aAAaC,UAAUvC,IAAIP,IAAd,CAAnB;AACA,UAAI6C,WAAWE,OAAX,KAAwB,EAAxB,IAA6BF,WAAWE,OAAX,CAAmBC,UAAnB,CAA+B,OAA/B,CAAjC,EAAyE;AACvExC,YAAImC,QAAJ,CAAalE,cAAe,mBAAf,CAAb,EAAiD,eAAO;AACtD,cAAIK,GAAJ,EAAS;AACP0B,gBAAIyC,MAAJ,CAAW,GAAX,EAAgB1B,GAAhB;AACD;AACF,SAJD;AAKD,OAND,MAMO;AACLd;AACD;AACF,KAXD;;AAaA;;;;AAIA,UAAMyC,SAASpD,QAAS,MAAT,EAAgBqD,MAAhB,CAAuBxD,GAAvB,CAAf;AACA,UAAMyD,KAAKtD,QAAS,WAAT,EAAqBoD,MAArB,CAAX;;AAEAE,OAAGC,EAAH,CAAO,YAAP,EAAoB,kBAAU;AAC5BC,aAAOC,IAAP,CAAa,SAAb;AACD,KAFD;;AAIA,UAAMC,WAAWN,OAAOO,MAAP,CAAclF,QAAQe,IAAtB,EAA4Bf,QAAQmF,IAApC,EAA0C,eAAO;AAChE,UAAI5E,GAAJ,EAAS;AACP,YAAIA,IAAI6E,IAAJ,KAAc,YAAlB,EAA+B;AAC7B;AACA3E,iBAAOC,KAAP,CACG,kCACCV,QAAQe,IACT,qDAHH;AAKA;AACD;;AAEDN,eAAOC,KAAP,CAAc,qDAAd,EAAoEH,GAApE;AACD;AACF,KAdgB,CAAjB;;AAgBA;AACA,UAAM8E,aAAa,CAAE,aAAF,EAAiB,0BAAjB,EAA4CC,GAA5C,CAAgD;AAAA,aACjEpF,cAAcuB,IAAd,CADiE;AAAA,KAAhD,CAAnB;;AAIA8D,aAASC,KAAT,CAAeH,UAAf,EAA2BP,EAA3B,CAA+B,QAA/B,kCAAwC,aAAY;AAClD,YAAM1E,iBAAN;AACAyE,SAAGY,EAAH,CAAO,SAAP,EAAiBC,IAAjB,CAAuB,QAAvB;AACD,KAHD;;AAKA,WAAO,CAACxE,QAAD,EAAW+D,QAAX,CAAP;AACD,G;;kBAzLcU,W;;;;;;;AAxCf,MAAM5B,MAAMxC,QAAS,KAAT,CAAZ;AACA,MAAMgE,WAAWhE,QAAS,UAAT,CAAjB;AACA,MAAMF,UAAUE,QAAS,SAAT,CAAhB;AACA,MAAMI,cAAcJ,QAAS,iBAAT,CAApB;AACA,MAAMgD,YAAYhD,QAAS,gBAAT,CAAlB;AACA,MAAM4C,UAAU5C,QAAS,SAAT,CAAhB;AACA,MAAMqE,KAAKrE,QAAS,UAAT,CAAX;AACA,MAAMJ,UAAUI,QAAS,SAAT,CAAhB;AACA,MAAMT,gBAAgBS,QAAS,yBAAT,CAAtB;AACA,MAAMX,YAAYW,QAAS,cAAT,CAAlB;AACA,MAAM,EAAEM,KAAF,KAAYN,QAAS,UAAT,CAAlB;AACA,MAAMsE,sBAAsBtE,QAAS,gCAAT,CAA5B;AACA,MAAMlB,cAAckB,QAAS,gBAAT,CAApB;AACA,MAAM,EAAEpB,YAAF,KAAmBoB,QAAS,eAAT,CAAzB;AACA,MAAMd,SAASc,QAAS,yBAAT,CAAf;AACA,MAAM2B,eAAe3B,QAAS,8BAAT,CAArB;AACA,MAAMuE,wBAAwBvE,QAAS,uCAAT,CAA9B;AACA,MAAMwE,QAAQxE,QAAS,OAAT,CAAd;AACA,MAAMyE,UAAUzE,QAAS,SAAT,CAAhB;AACA,MAAMwB,cAAcxB,QAAS,uBAAT,CAApB;;AAEA;;AAEA;AACA;AACA;AACA0E,WAAW,MAAM;AACfJ;AACD,CAFD,EAEG,KAFH;;AAIA,MAAMK,cAAcN,GAAGO,eAAH,CAAmB;AACrCC,SAAO9D,QAAQ+D,KADsB;AAErC1C,UAAQrB,QAAQgE;AAFqB,CAAnB,CAApB;;AAKA;AACAJ,YAAYpB,EAAZ,CAAgB,QAAhB,EAAyB,MAAM;AAC7BxC,UAAQiE,IAAR;AACD,CAFD;;AA+LAC,OAAOC,OAAP;AAAA,8CAAiB,WAAOzG,OAAP,EAAwB;AACvC,UAAM0G,SAASnF,QAAS,aAAT,CAAf;AACA,UAAMR,OACJ,OAAOf,QAAQe,IAAf,KAAyB,QAAzB,GAAmC4F,SAAS3G,QAAQe,IAAjB,EAAuB,EAAvB,CAAnC,GAAgEf,QAAQe,IAD1E;;AAGA,QAAIG,QAAJ;AACA,UAAM,IAAI0F,OAAJ,CAAY,mBAAW;AAC3BF,aAAO3F,IAAP,EAAa,UAACR,GAAD,EAAMsG,KAAN,EAAgB;AAC3B,YAAItG,GAAJ,EAAS;AACPE,iBAAOC,KAAP,CAAaH,GAAb;AACD;;AAED,YAAIQ,SAAS8F,KAAb,EAAoB;AAClB;AACA,gBAAMC,WAAY,wCAAuC/F,IAAK,kEAA9D;;AAEAmF,sBAAYY,QAAZ,CAAqBA,QAArB,EAA+B,kBAAU;AACvC,gBAAIC,OAAOC,MAAP,KAAkB,CAAlB,IAAuBD,OAAOE,KAAP,CAAa,UAAb,CAA3B,EAAqD;AACnDjH,sBAAQe,IAAR,GAAe8F,KAAf,CADmD,CAC9B;AACtB;;AAEDlB,wBAAY3F,OAAZ,EAAqBkH,IAArB,CAA0B,UAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,EAAY;AACpClG,yBAAWiG,CAAX;AACAlG;AACD,aAHD;AAID,WATD;AAUD,SAdD,MAcO;AACL0E,sBAAY3F,OAAZ,EAAqBkH,IAArB,CAA0B,UAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,EAAY;AACpClG,uBAAWiG,CAAX;AACAlG;AACD,WAHD;AAID;AACF,OAzBD;AA0BD,KA3BK,CAAN;;AA6BA,aAASoG,WAAT,CAAqBC,QAArB,EAA+BnC,IAA/B,EAAqCpE,IAArC,EAA2C;AACzC,YAAMwG,YAAYC,YAChBzD,IAAI0D,MAAJ,CAAW;AACTH,gBADS;AAETE,gBAFS;AAGTzG,YAHS;AAIT2G,kBAAW;AAJF,OAAX,CADF;AAOA,YAAMC,iBAAiBH,YACrBzD,IAAI0D,MAAJ,CAAW;AACTH,gBADS;AAETE,gBAFS;AAGTzG,cAAMgF,MAAM6B,IAAN,CAAW7G,IAAX,CAHG;AAIT2G,kBAAW;AAJF,OAAX,CADF;;AAQA,YAAMG,oBAAoB1C,SAAU,SAAV,IAAsBA,SAAU,IAA1D;AACA,UAAI2C,eAAJ,EAAqBC,iBAArB;AACA,UAAIF,iBAAJ,EAAuB;AACrB,YAAI;AACF;AACAC,4BAAkB9B,QAAQgC,EAAR,EAAlB;AACA,cAAIF,eAAJ,EAAqB;AACnB;AACA;AACA,gBACE,wDAAwDG,IAAxD,CACEH,eADF,CADF,EAIE;AACA;AACAC,kCAAoBJ,eAAeG,eAAf,CAApB;AACD,aAPD,MAOO;AACL;AACAA,gCAAkBI,SAAlB;AACD;AACF;AACF,SAlBD,CAkBE,OAAOC,EAAP,EAAW;AACX;AACD;AACF;AACD;AACA;AACA;AACA,YAAMC,sBAAsBT,eAAexC,IAAf,CAA5B;AACA,YAAMkD,qBAAqBd,UAAUpC,IAAV,CAA3B;AACA,aAAO;AACL2C,uBADK;AAELC,yBAFK;AAGLK,2BAHK;AAILC;AAJK,OAAP;AAMD;;AAED,aAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AACjD3F,cAAQtB,GAAR;AACAsB,cAAQtB,GAAR,CAAa,oBAAmBuE,MAAM6B,IAAN,CAAWW,OAAX,CAAoB,kBAApD;AACAzF,cAAQtB,GAAR;;AAEA,UAAIgH,KAAKT,iBAAT,EAA4B;AAC1BjF,gBAAQtB,GAAR,CACG,KAAIuE,MAAM6B,IAAN,CAAY,QAAZ,CAAqB,eAAcY,KAAKJ,mBAAoB,EADnE;AAGAtF,gBAAQtB,GAAR,CACG,KAAIuE,MAAM6B,IAAN,CAAY,kBAAZ,CAA+B,KAAIY,KAAKT,iBAAkB,EADjE;AAGD,OAPD,MAOO;AACLjF,gBAAQtB,GAAR,CAAa,KAAIgH,KAAKJ,mBAAoB,EAA1C;AACD;;AAEDtF,cAAQtB,GAAR;AACAsB,cAAQtB,GAAR,CACG,0EADH;AAGAsB,cAAQtB,GAAR;AACAsB,cAAQtB,GAAR,CAAa,KAAIgH,KAAKJ,mBAAoB,YAA1C;;AAEAtF,cAAQtB,GAAR;AACAsB,cAAQtB,GAAR,CAAa,mDAAb;AACAsB,cAAQtB,GAAR,CACG,oCAAD,GAAwC,GAAEuE,MAAM2C,IAAN,CAAY,cAAZ,CAA2B,EADvE;AAGA5F,cAAQtB,GAAR;AACD;;AAED,QAAImH,iBAAiB,IAArB;AACA;AACA;AACAzH,aAAS0H,MAAT,CAAiB,MAAjB,EAAwB,iBAAS;AAC/B;AACA;AACA;AACA,YAAMC,WAAW/C,sBAAsBgD,MAAMC,MAAN,CAAa,EAAb,EAAiB,IAAjB,CAAtB,CAAjB;AACA,YAAMP,OAAOnB,YAAa,MAAb,EAAoBrH,QAAQmF,IAA5B,EAAkCnF,QAAQe,IAA1C,CAAb;AACA,YAAMiI,eAAe,CAACH,SAASI,MAAT,CAAgBjC,MAAjB,IAA2B,CAAC6B,SAASK,QAAT,CAAkBlC,MAAnE;AACA;AACA;AACA;AACA;AACA,UAAIgC,gBAAgBL,cAApB,EAAoC;AAClCL,0BAAkBtI,QAAQmJ,eAAR,CAAwB3I,IAA1C,EAAgDgI,IAAhD,EAAsDxI,QAAQyI,OAA9D;AACA,YAAIzI,QAAQoJ,IAAZ,EAAkB;AAChB7H,kBAAS,KAAT,EAAeiH,KAAKH,kBAApB;AACD;AACF;;AAEDM,uBAAiB,KAAjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAjDD;AAkDD,GA7KD;;AAAA;AAAA;AAAA;AAAA","file":"develop.js","sourcesContent":["/* @flow */\n\nconst url = require(`url`)\nconst chokidar = require(`chokidar`)\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst parsePath = require(`parse-filepath`)\nconst request = require(`request`)\nconst rl = require(`readline`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`../utils/webpack.config`)\nconst bootstrap = require(`../bootstrap`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`../utils/copy-static-directory`)\nconst developHtml = require(`./develop-html`)\nconst { withBasePath } = require(`../utils/path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst launchEditor = require(`react-dev-utils/launchEditor`)\nconst formatWebpackMessages = require(`react-dev-utils/formatWebpackMessages`)\nconst chalk = require(`chalk`)\nconst address = require(`address`)\nconst sourceNodes = require(`../utils/source-nodes`)\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = () =>\n    developHtml(program).catch(err => {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n        `,\n        err\n      )\n    })\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  await createIndexHtml()\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n\n  // Allow requests from any origin. Avoids CORS issues when using the `--host` flag.\n  app.use((req, res, next) => {\n    res.header(`Access-Control-Allow-Origin`, `*`)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n\n  /**\n   * Refresh external data sources.\n   * This behavior is disabled by default, but the ENABLE_REFRESH_ENDPOINT env var enables it\n   * If no GATSBY_REFRESH_TOKEN env var is available, then no Authorization header is required\n   **/\n  app.post(`/__refresh`, (req, res) => {\n    const enableRefresh = process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n    const refreshToken = process.env.GATSBY_REFRESH_TOKEN\n    const authorizedRefresh =\n      !refreshToken || req.headers.authorization === refreshToken\n\n    if (enableRefresh && authorizedRefresh) {\n      console.log(`Refreshing source data`)\n      sourceNodes()\n    }\n    res.end()\n  })\n\n  app.get(`/__open-stack-frame-in-editor`, (req, res) => {\n    launchEditor(req.query.fileName, req.query.lineNumber)\n    res.end()\n  })\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n\n  // Check if the file exists in the public folder.\n  app.get(`*`, (req, res, next) => {\n    // Load file but ignore errors.\n    res.sendFile(\n      directoryPath(`/public${decodeURIComponent(req.path)}`),\n      err => {\n        // No err so a file was sent successfully.\n        if (!err || !err.path) {\n          next()\n        } else if (err) {\n          // There was an error. Let's check if the error was because it\n          // couldn't find an HTML file. We ignore these as we want to serve\n          // all HTML from our single empty SSR html file.\n          const parsedPath = parsePath(err.path)\n          if (\n            parsedPath.extname === `` ||\n            parsedPath.extname.startsWith(`.html`)\n          ) {\n            next()\n          } else {\n            res.status(404).end()\n          }\n        }\n      }\n    )\n  })\n\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.path)\n    if (parsedPath.extname === `` || parsedPath.extname.startsWith(`.html`)) {\n      res.sendFile(directoryPath(`public/index.html`), err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n\n  const server = require(`http`).Server(app)\n  const io = require(`socket.io`)(server)\n\n  io.on(`connection`, socket => {\n    socket.join(`clients`)\n  })\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${\n            program.port\n          } as there's already a process listing on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `plugins/**/gatsby-ssr.js`].map(path =>\n    directoryPath(path)\n  )\n\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    io.to(`clients`).emit(`reload`)\n  })\n\n  return [compiler, listener]\n}\n\nmodule.exports = async (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  let compiler\n  await new Promise(resolve => {\n    detect(port, (err, _port) => {\n      if (err) {\n        report.panic(err)\n      }\n\n      if (port !== _port) {\n        // eslint-disable-next-line max-len\n        const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n        rlInterface.question(question, answer => {\n          if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n            program.port = _port // eslint-disable-line no-param-reassign\n          }\n\n          startServer(program).then(([c, l]) => {\n            compiler = c\n            resolve()\n          })\n        })\n      } else {\n        startServer(program).then(([c, l]) => {\n          compiler = c\n          resolve()\n        })\n      }\n    })\n  })\n\n  function prepareUrls(protocol, host, port) {\n    const formatUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port,\n        pathname: `/`,\n      })\n    const prettyPrintUrl = hostname =>\n      url.format({\n        protocol,\n        hostname,\n        port: chalk.bold(port),\n        pathname: `/`,\n      })\n\n    const isUnspecifiedHost = host === `0.0.0.0` || host === `::`\n    let lanUrlForConfig, lanUrlForTerminal\n    if (isUnspecifiedHost) {\n      try {\n        // This can only return an IPv4 address\n        lanUrlForConfig = address.ip()\n        if (lanUrlForConfig) {\n          // Check if the address is a private ip\n          // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n          if (\n            /^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n              lanUrlForConfig\n            )\n          ) {\n            // Address is private, format it for later use\n            lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n          } else {\n            // Address is not private, so we will discard it\n            lanUrlForConfig = undefined\n          }\n        }\n      } catch (_e) {\n        // ignored\n      }\n    }\n    // TODO collect errors (GraphQL + Webpack) in Redux so we\n    // can clear terminal and print them out on every compile.\n    // Borrow pretty printing code from webpack plugin.\n    const localUrlForTerminal = prettyPrintUrl(host)\n    const localUrlForBrowser = formatUrl(host)\n    return {\n      lanUrlForConfig,\n      lanUrlForTerminal,\n      localUrlForTerminal,\n      localUrlForBrowser,\n    }\n  }\n\n  function printInstructions(appName, urls, useYarn) {\n    console.log()\n    console.log(`You can now view ${chalk.bold(appName)} in the browser.`)\n    console.log()\n\n    if (urls.lanUrlForTerminal) {\n      console.log(\n        `  ${chalk.bold(`Local:`)}            ${urls.localUrlForTerminal}`\n      )\n      console.log(\n        `  ${chalk.bold(`On Your Network:`)}  ${urls.lanUrlForTerminal}`\n      )\n    } else {\n      console.log(`  ${urls.localUrlForTerminal}`)\n    }\n\n    console.log()\n    console.log(\n      `View GraphiQL, an in-browser IDE, to explore your site's data and schema`\n    )\n    console.log()\n    console.log(`  ${urls.localUrlForTerminal}___graphql`)\n\n    console.log()\n    console.log(`Note that the development build is not optimized.`)\n    console.log(\n      `To create a production build, use ` + `${chalk.cyan(`gatsby build`)}`\n    )\n    console.log()\n  }\n\n  let isFirstCompile = true\n  // \"done\" event fires when Webpack has finished recompiling the bundle.\n  // Whether or not you have warnings or errors, you will get this event.\n  compiler.plugin(`done`, stats => {\n    // We have switched off the default Webpack output in WebpackDevServer\n    // options so we are going to \"massage\" the warnings and errors and present\n    // them in a readable focused way.\n    const messages = formatWebpackMessages(stats.toJson({}, true))\n    const urls = prepareUrls(`http`, program.host, program.port)\n    const isSuccessful = !messages.errors.length && !messages.warnings.length\n    // if (isSuccessful) {\n    // console.log(chalk.green(`Compiled successfully!`))\n    // }\n    // if (isSuccessful && (isInteractive || isFirstCompile)) {\n    if (isSuccessful && isFirstCompile) {\n      printInstructions(program.sitePackageJson.name, urls, program.useYarn)\n      if (program.open) {\n        require(`opn`)(urls.localUrlForBrowser)\n      }\n    }\n\n    isFirstCompile = false\n\n    // If errors exist, only show errors.\n    // if (messages.errors.length) {\n    // // Only keep the first error. Others are often indicative\n    // // of the same problem, but confuse the reader with noise.\n    // if (messages.errors.length > 1) {\n    // messages.errors.length = 1\n    // }\n    // console.log(chalk.red(\"Failed to compile.\\n\"))\n    // console.log(messages.errors.join(\"\\n\\n\"))\n    // return\n    // }\n\n    // Show warnings if no errors were found.\n    // if (messages.warnings.length) {\n    // console.log(chalk.yellow(\"Compiled with warnings.\\n\"))\n    // console.log(messages.warnings.join(\"\\n\\n\"))\n\n    // // Teach some ESLint tricks.\n    // console.log(\n    // \"\\nSearch for the \" +\n    // chalk.underline(chalk.yellow(\"keywords\")) +\n    // \" to learn more about each warning.\"\n    // )\n    // console.log(\n    // \"To ignore, add \" +\n    // chalk.cyan(\"// eslint-disable-next-line\") +\n    // \" to the line before.\\n\"\n    // )\n    // }\n  })\n}\n"]}