{"version":3,"sources":["../../src/schema/infer-graphql-input-fields-from-fields.js"],"names":["inferInputObjectStructureFromFields","GraphQLInputObjectType","GraphQLBoolean","GraphQLString","GraphQLFloat","GraphQLInt","GraphQLID","GraphQLList","GraphQLEnumType","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","require","_","report","createTypeName","createKey","makeNullable","type","ofType","convertToInputType","typeMap","has","nextTypeMap","Set","Array","from","concat","fields","transform","getFields","out","fieldConfig","key","Object","keys","length","name","innerType","message","verbose","scalarFilterMap","Int","eq","ne","Float","ID","String","regex","glob","Boolean","convertToInputFilter","prefix","upperFirst","innerFilter","innerFields","in","extractFieldNamesFromInputField","accu","push","each","typeName","inferredFields","sort","inputType","inputFilter"],"mappings":"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","file":"infer-graphql-input-fields-from-fields.js","sourcesContent":["// @flow\n\nconst {\n  GraphQLInputObjectType,\n  GraphQLBoolean,\n  GraphQLString,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLID,\n  GraphQLList,\n  GraphQLEnumType,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\n\nimport type { GraphQLInputType, GraphQLType } from \"graphql\"\n\nconst _ = require(`lodash`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst createTypeName = require(`./create-type-name`)\nconst createKey = require(`./create-key`)\n\ntype GraphQLNullableInputType<T> =\n  | GraphQLScalarType\n  | GraphQLEnumType\n  | GraphQLInputObjectType\n  | GraphQLList<T>\n\nfunction makeNullable(type: GraphQLInputType): GraphQLNullableInputType<any> {\n  if (type instanceof GraphQLNonNull) {\n    return type.ofType\n  }\n  return type\n}\n\nfunction convertToInputType(\n  type: GraphQLType,\n  typeMap: Set\n): ?GraphQLInputType {\n  // track types already processed in current tree, to avoid infinite recursion\n  if (typeMap.has(type)) {\n    return null\n  }\n  const nextTypeMap = new Set(Array.from(typeMap).concat([type]))\n\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLEnumType) {\n    return type\n  } else if (type instanceof GraphQLObjectType) {\n    const fields = _.transform(type.getFields(), (out, fieldConfig, key) => {\n      const type = convertToInputType(fieldConfig.type, nextTypeMap)\n      if (type) out[key] = { type }\n    })\n    if (Object.keys(fields).length === 0) {\n      return null\n    }\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${type.name}InputObject`),\n      fields,\n    })\n  } else if (type instanceof GraphQLList) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLList(makeNullable(innerType)) : null\n  } else if (type instanceof GraphQLNonNull) {\n    let innerType = convertToInputType(type.ofType, nextTypeMap)\n    return innerType ? new GraphQLNonNull(makeNullable(innerType)) : null\n  } else {\n    let message = type ? `for type: ${type.name}` : ``\n    if (type instanceof GraphQLInterfaceType) {\n      message = `GraphQLInterfaceType not yet implemented ${message}`\n    } else if (type instanceof GraphQLUnionType) {\n      message = `GraphQLUnionType not yet implemented ${message}`\n    } else {\n      message = `Invalid input type ${message}`\n    }\n    report.verbose(message)\n  }\n\n  return null\n}\n\nconst scalarFilterMap = {\n  Int: {\n    eq: { type: GraphQLInt },\n    ne: { type: GraphQLInt },\n  },\n  Float: {\n    eq: { type: GraphQLFloat },\n    ne: { type: GraphQLFloat },\n  },\n  ID: {\n    eq: { type: GraphQLID },\n    ne: { type: GraphQLID },\n  },\n  String: {\n    eq: { type: GraphQLString },\n    ne: { type: GraphQLString },\n    regex: { type: GraphQLString },\n    glob: { type: GraphQLString },\n  },\n  Boolean: {\n    eq: { type: GraphQLBoolean },\n    ne: { type: GraphQLBoolean },\n  },\n}\n\nfunction convertToInputFilter(\n  prefix: string,\n  type: GraphQLInputType\n): ?GraphQLInputObjectType {\n  if (type instanceof GraphQLScalarType) {\n    const name = type.name\n    const fields = scalarFilterMap[name]\n\n    if (fields == null) return null\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}Query${name}`),\n      fields: fields,\n    })\n  } else if (type instanceof GraphQLInputObjectType) {\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}{type.name}`),\n      fields: _.transform(type.getFields(), (out, fieldConfig, key) => {\n        const type = convertToInputFilter(\n          `${prefix}${_.upperFirst(key)}`,\n          fieldConfig.type\n        )\n        if (type) out[key] = { type }\n      }),\n    })\n  } else if (type instanceof GraphQLList) {\n    const innerType = type.ofType\n    const innerFilter = convertToInputFilter(`${prefix}ListElem`, innerType)\n    const innerFields = innerFilter ? innerFilter.getFields() : {}\n\n    return new GraphQLInputObjectType({\n      name: createTypeName(`${prefix}QueryList`),\n      fields: {\n        ...innerFields,\n        in: { type: new GraphQLList(innerType) },\n      },\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    return convertToInputFilter(prefix, type.ofType)\n  }\n\n  return null\n}\n\nfunction extractFieldNamesFromInputField(\n  prefix: string,\n  type: GraphQLInputType,\n  accu: string[]\n) {\n  if (type instanceof GraphQLScalarType || type instanceof GraphQLList) {\n    accu.push(prefix)\n  } else if (type instanceof GraphQLInputObjectType) {\n    _.each(type.getFields(), (fieldConfig, key) => {\n      extractFieldNamesFromInputField(\n        `${prefix}___${key}`,\n        fieldConfig.type,\n        accu\n      )\n    })\n  } else if (type instanceof GraphQLNonNull) {\n    extractFieldNamesFromInputField(prefix, type.ofType, accu)\n  }\n}\n\n// convert output fields to output fields and a list of fields to sort on\nexport function inferInputObjectStructureFromFields({\n  fields,\n  typeName = ``,\n}: any) {\n  const inferredFields = {}\n  const sort = []\n\n  _.each(fields, (fieldConfig, key) => {\n    const inputType = convertToInputType(fieldConfig.type, new Set())\n    const inputFilter =\n      inputType && convertToInputFilter(_.upperFirst(key), inputType)\n\n    if (!inputFilter) return\n\n    inferredFields[createKey(key)] = { type: inputFilter }\n\n    // Add sorting (but only to the top level).\n    if (typeName) {\n      extractFieldNamesFromInputField(key, inputType, sort)\n    }\n  })\n\n  return { inferredFields, sort }\n}\n"]}