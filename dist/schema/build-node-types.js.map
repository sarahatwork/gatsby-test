{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","module","exports","nodes","typeName","intermediateType","name","fieldsFromPlugins","type","allNodes","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","description","interfaces","createNodeFields","proccesedType","isTypeOf","value","internal","inferedInputFields","filterFields","inferredFields","nodeObjectType","node","args","resolve","a","context","runSift","latestNodes","filter","n","isObject","path","id","processedTypes","camelCase","createType","types","groupBy","defaultNodeFields","parent","children","map","childNodesByType","flatMap","undefined","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","filteredNodes","nodeId","childNode","find","Promise","all"],"mappings":"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","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path ? context.path : `LAYOUT___${context.id}`,\n            type: gqlType,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}